{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Overview\
\'97\'97\'97\'97\
This skeleton uses GPUImage library https://github.com/BradLarson/GPUImage for blurring the detected faces. For each detected face, it will create a GPUImagePixellatePositionFilter. It will try to reuse unused filters if possible.\
\
To be implemented\
\'97\'97\'97\'97\'97\'97\'97\'97\
\
1. ORKFaceDetector\
    The face detector is the class responsible to detect faces on a given sample buffer. It must also notify its delegate every time it detects a face and keep track of detected faces in an array of objects conforming to the ORKFace protocol.\
\
2. ORKFace\
    This holds all the information we need about a face. We just need its bounding rect expressed in view coordinates with origin being the top left corner starting at (0, 0) going to (viewWidth, viewHeight)\
\
3. ViewController.m\
    Instantiate and initialize your own face detector on the createFaceDetector method. Also make sure you set the view controller as its delegate so the view controller can pass the detected face information to the blur tool.}